//intialises the previousValue variable
int previousValue = 0;

//intialises the analogInput variable
int analogInput = A0;

//initialise global led pin variables
#define LED_RED 5
#define LED_ORANGE 6
#define LED_YELLOW 9
#define LED_GREEN 10
#define LED_BLUE 11


void setup() {
  
  //initialise serial port
  Serial.begin(9600);
  
  //enables output onto the LEDS
  pinMode(analogInput, INPUT);
  pinMode(LED_RED, OUTPUT); 
  pinMode(LED_ORANGE, OUTPUT);
  pinMode(LED_YELLOW, OUTPUT);
  pinMode(LED_GREEN, OUTPUT);
  pinMode(LED_BLUE, OUTPUT);
}

void loop() {
  // put your main code here, to run repeatedly:

  String receivedCommand = readInput();
  Serial.println(receivedCommand);
  turnOffLEDs();
  if (!isInputValid(receivedCommand)) {
    displayError();
    digitalWrite(LED_RED, HIGH);
  } else {
    if (receivedCommand.length() == 1) {
      displayPotentiometerValue(readPotentiometerValue());
    } else {
      // For speed and efficiency this part calculates first operand and operator only once as this is the same for both cases 'cnnn' and 'cnnnnnn'
      char numericOperator = receivedCommand.charAt(0);
      int firstNumber = receivedCommand.substring(1,4).toInt();
      if (receivedCommand.length() == 4) {
        makeOperation(numericOperator, previousValue, firstNumber);
      } else {
        // Only last possibility here is string length of 7 so we extract next number
        int secondNumber = receivedCommand.substring(4,7).toInt();
        makeOperation(numericOperator, firstNumber, secondNumber);
      }
    }
  }
}

void turnOffLEDs() { //function for turning off LEDs 
    digitalWrite(LED_RED, LOW);
    digitalWrite(LED_ORANGE, LOW);
    digitalWrite(LED_YELLOW, LOW);
    digitalWrite(LED_GREEN, LOW);
    digitalWrite(LED_BLUE, LOW);  
}

//function for displaying error
void displayError() { 
  Serial.println("ERROR");
  Serial.println("");
   
}

// if function to display potentiometer value via LEDs
void displayPotentiometerValue(int value) {
  Serial.println(value);

  int temporaryValue = value; //initialises temporary value which is equal to the value given

  if (temporaryValue >= 16) { // if value given is greater than or equal  to 16
    digitalWrite(LED_BLUE, HIGH); //display on blue LED
    temporaryValue = temporaryValue - 16; // then take away 16 from the value given
  }

  
  if (temporaryValue >= 8) { // if temporary value is greater than or equal to 8
    digitalWrite(LED_GREEN, HIGH); // display on green LED
    temporaryValue = temporaryValue - 8; // subtract 8 from the remaining value
  }

  if (temporaryValue >= 4) { // if temporary value is greater than or equal to 4
    digitalWrite(LED_YELLOW, HIGH); // display on yellow LED
    temporaryValue = temporaryValue - 4; // subtract 4 from remaining value
  }

  if (temporaryValue >= 2) { // if temporary value is greater than or equal to 2
    digitalWrite(LED_ORANGE, HIGH); // display on orange LED
    temporaryValue = temporaryValue - 2; // subtract 2 from remaining value
  }

  if (temporaryValue >= 1) { // if temporary value is greater than or equal to 1
    digitalWrite(LED_RED, HIGH); // display on red LED
    temporaryValue = temporaryValue - 1; // subract 1 from remaining value
  }
  
}

// potentiometer function
int readPotentiometerValue() { 
  int potentiometerValue = analogRead(analogInput); // potentiometer variable is equal to input

  return map(potentiometerValue,0,1023, 0, 31);
}

void makeOperation(char numericOperator, int firstNumber, int secondNumber) {
  int result;

  if (secondNumber == 0 && numericOperator == '/') {
    displayError();
    digitalWrite(LED_RED, HIGH);
    delay(100);
    digitalWrite(LED_RED, LOW);
    delay(100);
    digitalWrite(LED_RED, HIGH);
    delay(100);
    digitalWrite(LED_RED, LOW);
    delay(100);
    analogWrite(LED_RED, 127);
    return;
  }

// switch case statement for all the possible characters that can be given in the program 
// it will then provide the result
  switch(numericOperator) {

    // Addition statement
    case '+':
      result = firstNumber + secondNumber; // result variable equals the addition of the first and second number
      digitalWrite(LED_YELLOW, HIGH); // turn on both green and yellow led during addition
      digitalWrite(LED_GREEN, HIGH);// turn on both green and yellow led during addition
      break;

    // Minus statement
    case '-':
      digitalWrite(LED_YELLOW, HIGH); // turn on just yellow during subtractions
      result = firstNumber - secondNumber; // // subtraction of first and second number will equal the result
      break;

    // Multiplication statement 
    case '*':
      digitalWrite(LED_GREEN, HIGH); // turn on just green led during mulitplication
      result = firstNumber * secondNumber; // multiplication of first and second number will equal the result
      break;

    // Division statement
    case '/':
      // Dividing integers will cut off decimal point 
      result = firstNumber / secondNumber; // division of first and second number will equal result
      break;
  }
  
  previousValue = result; //previous value is equal to result given

  if ( result >= 0) { // result is greater than 0 
    digitalWrite(LED_BLUE, HIGH); //  blue LED flashes on full brightness
  } else if (result == 0) { // if its equal to 0
    analogWrite(LED_BLUE, 50); // BLUE LED as half brightness
  } else {
    digitalWrite(LED_BLUE, LOW); // any other values blue led does not turn on
  }
  
  if ( result % 2 == 0) {
    digitalWrite(LED_ORANGE, HIGH); // turn on orange led
  } else {
    digitalWrite(LED_ORANGE, LOW); // anything else, orange led does not light   
  }
  
  
  Serial.println(result); // print the result on the serial line (so the user can see it) 
}

// read input string function (while loop)
String readInput() {
  while(Serial.available() == 0) {
    delay(10);
  }

  String serialInput = Serial.readString();

  return serialInput;
}

// checking if input is valid function 
bool isInputValid(String serialInput) {
  if (serialInput.length() != 7 && serialInput.length() != 4 && serialInput.length() != 1) { 
    return false;
  }

  if (serialInput.length() == 1 && serialInput.equals("P")) {
    return true;
  }

  char numericOperator = serialInput.charAt(0);
  
  if (numericOperator != '+' && numericOperator != '-' && numericOperator != '*' && numericOperator != '/') {
    return false;
  }

  if (!isProperDigit(serialInput.substring(1,4))) {
    return false;
  }

  // Already checked all possibilities for input of length 4 so we can return its correct
  if (serialInput.length() == 4) {
    return true;
  }

  // The last possibility here is input of length 7 so we check if last three chars are the correct number
  if (isProperDigit(serialInput.substring(4,7))) {
    return true;
  }
  return false;
}

//function to check if the entered data is a usable digit value
bool isProperDigit(String numberGiven) {
  if ( (isDigit(numberGiven.charAt(0)) || numberGiven.charAt(0) == '-') && isDigit(numberGiven.charAt(1)) && isDigit(numberGiven.charAt(2)) ) {
    return true;
  }
  return false;
}

